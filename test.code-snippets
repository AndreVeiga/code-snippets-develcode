{
    "test getTools": {
        "prefix": "test-getTools",
        "description": "test for react using jest and shallow basics.",
        "scope": "javascript",
        "body": [
            "import { getTools } from 'helpers'",
            "import component from 'path/path/component'",
            "",
            "describe('<component />', () => {",
            "   const initialProps = {",
            "       translate: key => key,",
            "       state: {",
            "",
            "       }",
            "   }",
            "",
            "   const { setup } = getTools(component, initialProps)",
            "",
            "   it('should render the component', () => {",
            "       const { component } = setup()",
            "       expect(component).to.exist",
            "   })",
            "",
            "   it('descrição (em inglês) do teste', () => {",
            "       const { component } = setup()",
            "       // Lógica do teste",
            "",
            "       expect(component).to.equal(true)",
            "   })",
            "})",
            ""
        ]
    },
    "test Shallow": {
        "prefix": "test-shallow",
        "description": "test for react using jest and shallow basics.",
        "scope": "javascript",
        "body": [
            "import React from 'react'",
            "import { shallow } from 'enzyme'",
            "import Component from 'path/path/Component'",
            "",
            "describe('<Component />', () => {",
            "  let component, props",
            "",
            "  beforeEach(() => {",
            "    props = {",
            "      translate: key => key,",
            "",
            "    }",
            "",
            "    component = shallow(<Component {...props} />)",
            "  })",
            "",
            "  it('renders the component', () => {",
            "    expect(component).to.be.exist",
            "  })",
            "",
            "   it('descrição (em inglês) do teste', () => {",
            "       // Lógica do teste",
            "",
            "       expect(component).to.equal(true)",
            "   })",
            "})",
            ""
        ]
    },
    "test Reducer": {
        "prefix": "test-reducer",
        "description": "test for react using jest and shallow basics.",
        "scope": "javascript",
        "body": [
            "import reducer from 'reducers/reducer'",
            "",
            "import {",
            "  CONSTANTE_REQUEST,",
            "  CONSTANTE_SUCCESS,",
            "  CONSTANTE_ERROR",
            "} from 'actionTypes'",
            "",
            "const DEFAULT_STATE = {",
            "  records: [],",
            "  error: null,",
            "  isFetching: false",
            "}",
            "",
            "describe('Reducer: reducer', () => {",
            "  it('should returns default state', () => {",
            "    expect(reducer(undefined, { type: {} })).to.deep.equal(DEFAULT_STATE)",
            "  })",
            "",
            "  it('descrição (em inglês) da função de request', () => {",
            "    const action = { type: CONSTANTE_REQUEST }",
            "    const expected = {",
            "      ...DEFAULT_STATE,",
            "      isFetching: true",
            "    }",
            "    expect(reducer(undefined, action)).to.deep.equal(expected)",
            "  })",
            "",
            "  it('descrição (em inglês) da função de sucesso', () => {",
            "    const payload = { chave: valor }",
            "    const action = { type: CONSTANTE_SUCCESS, payload }",
            "",
            "    const expected = {",
            "      ...DEFAULT_STATE,",
            "      isFetching: false,",
            "      error: null,",
            "      records: payload",
            "    }",
            "    expect(reducer(undefined, action)).to.deep.equal(expected)",
            "  })",
            "",
            "  it('descrição (em inglês) da função de erro', () => {",
            "    const payload = 'Some error'",
            "    const action = { type: CONSTANTE_ERROR, payload }",
            "    const expected = {",
            "      ...DEFAULT_STATE,",
            "      isFetching: false,",
            "      error: payload,",
            "      records: []",
            "    }",
            "    expect(reducer(undefined, action)).to.deep.equal(expected)",
            "  })",
            "})",
            ""
        ]
    }
}